---
title: "Analyzing Trends in Cricket Games"
subtitle: "INFO 526 - Project Final"
author: 
  - name: "*Plot Wizards*" - Nandhini  Anne, Sai Navya Reddy Busireddy, Srinivasan Poonkundran, Tejas Bhawari, Anjani Sowmya Bollapragada, Mohit Rakesh Taparia, Alexander Berliner
    affiliations:
      - name: "School of Information, University of Arizona"
      - description: "Analyzing cricket match data to understand team performances
and match outcomes."
format:
   html:
    code-tools: true
    code-overflow: wrap
    embed-resources: true
editor: visual
execute:
  warning: false
  echo: false
---

## Abstract

This project aims to create a dashboard for a live cricket match using historical data and API mock-ups. The motivation stems from showcasing data visualization skills within the context of a dynamic, real-time dataset, albeit simulated through historical data updates. Our data provides comprehensive information about cricket matches, including team performance, player statistics, and match outcomes. The project's research questions focus on analyzing scoring rates, player batting and bowling performances, partnerships' influence on total runs, and team dynamics throughout the match.

The backend APIs play a crucial role in providing real-time or pseudo-real-time data updates for batting performance, bowling performance, partnerships, and player performance tracking. The team is organized into tasks such as JDBC connectivity, API creation, data wrangling, mock data creation, and frontend-backend integration. The GitHub repository structure includes a data folder for datasets, a readme.md file, and index.qmd for the frontend, with deployment planned on GitHub Pages.

Overall, this project showcases a comprehensive approach to data visualization, backend API integration, and dashboard creation for a live cricket match experience, blending historical data insights with dynamic dashboard updates.

## Introduction

*"**Analyzing Trends in Cricket Games**"* aims to develop a dynamic dashboard that visualizes cricket match data to simulate a live game experience. This initiative will utilize a large historical dataset to create an environment that mirrors real-time data feeds without the associated costs. By mocking live data updates, our dashboard will provide insights into various match aspects such as scoring rates, player performances, and team dynamics. The project highlights our proficiency in data visualization and addresses the challenge of working with live datasets by implementing innovative solutions like automated data refreshes and API-driven analytics. This approach not only enhances our understanding of cricket game trends but also showcases the potential of real-time sports analytics in a cost-effective manner.

## Question1

How did the (a) scoring rate, (b) player batting performances, and (c) bowlers’ economy rates, evolve throughout the match?

## Approach

To analyze how scoring rates, player batting performances, and bowlers’ economy rates evolve throughout a cricket match, we'll start by importing and cleaning our datasets, ensuring data integrity and consistency. We'll then process the data to calculate runs per over, total runs by each batsman, and economy rates for bowlers, adjusting for factors like incomplete overs. Visualizations will be crafted to display these metrics effectively: scoring rates will be shown via line or bar charts, batting performances through bar charts, and bowlers' economy rates with box or violin plots. These visual tools will allow us to explore key performance trends and insights, providing a holistic view of the match's strategic dynamics.

```{r}
library(flexdashboard)
library(tidyverse)
library(highcharter)
library(htmltools)
library(viridis)
library(knitr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(shiny)
```

```{r}
# Read the complete dataset outside the reactive context to improve performance
odi_data <- read.csv("data/filtered_data_5years.csv")

# Define the user interface
ui <- fluidPage(
  titlePanel("Cricket Match Dashboard"),
  
  # Dropdown selection for countries
  selectInput(inputId = "bowling_team",
              label = "Choose a Country:",
              choices = c("India", "Australia", "England", "South Africa","Pakistan","West Indies","Ireland","Scotland","Nepal","Canada","United States","Oman","United Arab Emirates","Zimbabwe","Afghanistan","Netherlands"), 
              selected = "India"),
  
  # Output plot
  plotOutput(outputId = "scorePlot")
)

# Define server logic
server <- function(input, output) {
  
  # Read the complete dataset outside the reactive context to improve performance
  odi_data <- read.csv("data/filtered_data_5years.csv")

  # Assume 'odi_data' has a 'Country' column. If not, add it to your dataset accordingly.
  
  # Reactive expression to filter the data based on selected country
  filteredData <- reactive({
    odi_data %>%
      filter(bowling_team == input$bowling_team) %>%
      group_by(innings, ball) %>%
      summarise(Runs_Scored = mean(runs_off_bat), .groups = "drop") %>%
      group_by(innings, over = floor(ball)) %>%
      summarise(Total_Runs = sum(Runs_Scored), .groups = "drop")
  })
  
  # Render the plot based on the filtered data
  output$scorePlot <- renderPlot({
    ggplot(filteredData(), aes(x = over, y = Total_Runs, color = factor(innings))) +
      geom_line() +
      labs(x = "Overs", 
           y = "Runs given to opponent / Over", 
           title = "Scoring Rate Evolution",
           color = "Innings") +
      theme_minimal() 
  })
}

# Run the app
shinyApp(ui = ui, server = server)

```
