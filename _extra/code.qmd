```{r, warning=FALSE, message=FALSE}
#| label: load-pkgs
#| message: false

suppressWarnings(library(tidyverse))
library(knitr)
library(lubridate)
library(dplyr)
library(shiny)
library(plotly)
library(ggplot2)
```

## Plots

### Question 1

```{r}

odi_data <- read.csv("../data/filtered_data_5years.csv")


filteredData <- odi_data %>%
      filter(match_id == 1389389) |>
  mutate(over = floor(ball)) |>
  group_by(batting_team) |>
  mutate(runs = cumsum(runs_off_bat + extras))
  
ggplot(filteredData, aes(x = ball, y = runs, color = batting_team)) +
  geom_line() +
  labs(x = "Overs", 
       y = "Runs", 
       title = "Scoring Rate Evolution",
       color = "Innings") +
  theme_minimal() 


```

```{r}
t = odi_data |> filter(season == "2023/00")

idList = unique(t$match_id)

```
```{r}





```



```{r}
# Define the user interface
ui <- fluidPage(
  titlePanel("Cricket Match Dashboard"),
  
  # Dropdown selection for countries
  selectInput(inputId = "bowling_team",
              label = "Choose a Country:",
              choices = c("India", "Australia", "England", "South Africa","Pakistan","West Indies","Ireland","Scotland","Nepal","Canada","United States","Oman","United Arab Emirates","Zimbabwe","Afghanistan","Netherlands"), 
              selected = "India"),
  
  # Output plot
  plotOutput(outputId = "scorePlot")
)

# Define server logic
server <- function(input, output) {
  
  # Read the complete dataset outside the reactive context to improve performance
  odi_data <- read.csv("../data/filtered_data_5years.csv")

  # Assume 'odi_data' has a 'Country' column. If not, add it to your dataset accordingly.
  
  # Reactive expression to filter the data based on selected country
  filteredData <- reactive({
    odi_data %>%
      filter(bowling_team == input$bowling_team) %>%
      group_by(innings, ball) %>%
      summarise(Runs_Scored = sum(runs_off_bat) + sum(extras), .groups = "drop") %>%
      group_by(innings, over = ceiling(ball)) %>%
      summarise(Total_Runs = sum(Runs_Scored), .groups = "drop")
  })
  
  # Render the plot based on the filtered data
  output$scorePlot <- renderPlot({
    ggplot(filteredData(), aes(x = over, y = Total_Runs, color = factor(innings))) +
      geom_line() +
      labs(x = "Overs", y = "Runs Scored per Over", title = "Scoring Rate Evolution") +
      theme_minimal()
  })
}

# Run the app
shinyApp(ui = ui, server = server)
```

```{r}
library(shiny)
library(ggplot2)
library(dplyr)

# Read the dataset only once to improve performance
  odi_data <- read.csv("../data/filtered_data_5years.csv")

# Define the UI for the application
ui <- fluidPage(
  titlePanel("Top Batsmen by Total Runs Scored"),

  # Dropdown for selecting the season
  selectInput(inputId = "season",
              label = "Select Season:",
              choices = unique(odi_data$season), # Assuming 'season' column exists in odi_data
              selected = unique(odi_data$season)[1]),

  # Plot output
  plotOutput("batsmanPlot")
)

# Server logic to generate the plot based on the selected season
server <- function(input, output) {
  
  
  # Reactive expression to filter data based on selected season and calculate the top batsmen
  topBatsmenData <- reactive({
    odi_data %>%
      filter(season == input$season) %>%
      group_by(striker) %>%
      summarise(Total_Runs = sum(runs_off_bat), .groups = "drop") %>%
      top_n(10, Total_Runs) %>% # Adjust the number 10 to show more or fewer top batsmen
      arrange(desc(Total_Runs))
  })
  
  # Render the plot output
  output$batsmanPlot <- renderPlot({
    ggplot(topBatsmenData(), aes(x = reorder(striker, Total_Runs), y = Total_Runs)) +
      geom_bar(stat = "identity", fill = "skyblue") +
      labs(x = "Batsman", y = "Total Runs Scored", title = "Top Batsmen by Total Runs Scored") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
  })
}

# Run the app
shinyApp(ui = ui, server = server)
```

### Alex's PLots

```{r}
#| label: read data
runs_per_over <- odi_data |>
  group_by(innings, ball) |>
    summarise(
      Runs_Scored = sum(runs_off_bat) + sum(extras), 
      .groups = "drop"
    ) |>
  group_by(innings, over = ceiling(ball)) |>
  summarise(
    Total_Runs = sum(Runs_Scored), 
    .groups = "drop"
  )
runs_per_over

# Plot scoring rate evolution
ggplot(runs_per_over, aes(x = over, y = Total_Runs, color = factor(innings))) +
  geom_line() +
  labs(
    x = "Overs",
    y = "Runs Scored per Over",
    title = "Scoring Rate Evolution"
  )

batsman_runs <- cric |>
  group_by(striker) |>
  summarise(
    Total_Runs = sum(runs_off_bat), .groups = "drop"
  )# Sort batsmen by total runs scored

batsman_runs <- batsman_runs |>
  arrange(desc(Total_Runs))

batsman_runs = batsman_runs[1:10,]
batsman_runs

ggplot(batsman_runs, aes(x = reorder(striker,Total_Runs), y = Total_Runs))+
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(
    x = "Batsman",
    y = "Total Runs Scored",
    title = "Top Batsmen by Total Runs Scored"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

bowler_rates <- cric |>
  group_by(bowler) |>
  mutate(
    econ_rate = sum(runs_off_bat)/ceiling(ball),
  )

bowler_rates <- subset(bowler_rates, season == "2022/23")
bowler_rates <- bowler_rates|>
  group_by(bowler)|>
  arrange(desc(econ_rate))
bowler_rates <- subset(bowler_rates, bowler %in% unique(bowler)[1:10])
bowler_rates

ggplot(bowler_rates, aes(x = fct_inorder(bowler),
                         y = econ_rate)) +
  geom_boxplot() +
  labs(
    x = "Bowler",
    y = "Econ Rate",
    title= 'Distribution of Economy Rates by season',
    subtitle = "for top 5 Bowlers"
  )+
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(hjust = 0, face = "bold")
  )

```

### QUestion 2

## Player Comparision

```{r, warning=FALSE, message=FALSE}
#| label: player-comp-batsman


# Load necessary libraries

filtered_data_5years <- read.csv("../data/filtered_data_5years.csv")

# Define UI for the Shiny app
ui <- fluidPage(
  
  # Dropdown menu for selecting players
  selectInput(inputId = "player1", label = "Select Player 1:",
              choices = unique(filtered_data_5years$striker),
              selected = NULL, multiple = FALSE),
  
  selectInput(inputId = "player2", label = "Select Player 2:",
              choices = unique(filtered_data_5years$striker),
              selected = NULL, multiple = FALSE),
  
  # Plot output
  plotOutput(outputId = "batting_performance_plot")
)

# Define server logic
server <- function(input, output) {
  
  # Reactive function to filter data based on selected players
  player1_data <- reactive({
    filtered_data_5years %>%
      filter(striker == input$player1) %>%
      group_by(season) %>%
      summarise(total_runs = sum(as.numeric(runs_off_bat)), .groups = 'drop')
  })
  
  player2_data <- reactive({
    filtered_data_5years %>%
      filter(striker == input$player2) %>%
      group_by(season) %>%
      summarise(total_runs = sum(as.numeric(runs_off_bat)), .groups = 'drop')
  })
  
  # Render the plot
  output$batting_performance_plot <- renderPlot({
    
    # Filter and aggregate data for selected players
    player1 <- player1_data()
    player2 <- player2_data()
    
    # Plot batting performance as bar plots
    plot1 <- ggplot(player1, aes(x = season, y = total_runs)) +
      geom_bar(stat = "identity", fill = "blue") +
      labs(title = paste("Batting Performance of", input$player1),
           x = "Season",
           y = "Total Runs")
    
    plot2 <- ggplot(player2, aes(x = season, y = total_runs)) +
      geom_bar(stat = "identity", fill = "red") +
      labs(title = paste("Batting Performance of", input$player2),
           x = "Season",
           y = "Total Runs")
    
    # Arrange plots side by side
    gridExtra::grid.arrange(plot1, plot2, ncol = 2)
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)

```

```{r, warning=FALSE, message=FALSE}
#| label: player-comp-bowlers
# b. Bowlers Performance - Player Comparision

# Define UI for the Shiny app
ui <- fluidPage(
  
  # Dropdown menu for selecting players
  selectInput(inputId = "player1", label = "Select Player 1:",
              choices = unique(filtered_data_5years$bowler),
              selected = NULL, multiple = FALSE),
  
  selectInput(inputId = "player2", label = "Select Player 2:",
              choices = unique(filtered_data_5years$bowler),
              selected = NULL, multiple = FALSE),
  
  # Plot output
  plotOutput(outputId = "bowling_performance_plot")
)

# Define server logic
server <- function(input, output) {
  
  # Reactive function to filter data based on selected players
  player1_data <- reactive({
    filtered_data_5years %>%
      filter(bowler == input$player1) %>%
      group_by(season) %>%
      summarise(total_wickets = sum(as.numeric(win_by_wickets, na.rm = TRUE)), .groups = 'drop')
  })
  
  player2_data <- reactive({
    filtered_data_5years %>%
      filter(bowler == input$player2) %>%
      group_by(season) %>%
      summarise(total_wickets = sum(as.numeric(win_by_wickets, na.rm = TRUE)), .groups = 'drop')
  })
  
  # Render the plot
  output$bowling_performance_plot <- renderPlot({
    
    # Filter and aggregate data for selected players
    player1 <- player1_data()
    player2 <- player2_data()
    
    # Plot bowling performance as bar plots
    plot1 <- ggplot(player1, aes(x = season, y = total_wickets)) +
      geom_bar(stat = "identity", fill = "blue") +
      labs(title = paste("Bowling Performance of", input$player1),
           x = "Season",
           y = "Total Wickets")
    
    plot2 <- ggplot(player2, aes(x = season, y = total_wickets)) +
      geom_bar(stat = "identity", fill = "red") +
      labs(title = paste("Bowling Performance of", input$player2),
           x = "Season",
           y = "Total Wickets")
    
    # Arrange plots side by side
    gridExtra::grid.arrange(plot1, plot2, ncol = 2)
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)

```

```{r, warning=FALSE, message=FALSE}
#| label: team-comp

# c. Team Comparison

# Define UI for the Shiny app
ui <- fluidPage(
  
  # Dropdown menu for selecting season
  selectInput(inputId = "season", label = "Select Season:",
              choices = unique(filtered_data_5years$season),
              selected = NULL, multiple = FALSE),
  
  # Table output
  tableOutput(outputId = "team_performance_table")
)

# Define server logic
server <- function(input, output) {
  
  # Reactive function to filter data based on selected season
  season_data <- reactive({
    filtered_data_5years %>%
      filter(season == input$season) %>%
      group_by(match_id, team1, team2, winner) %>%
      summarise(runs_made = sum(runs_off_bat, na.rm = TRUE),  
                player_of_match = player_of_match[1], 
                .groups = 'drop') %>%
      drop_na() %>%  # Drop rows with NA values
      distinct(match_id, .keep_all = TRUE)  # Keep only unique match IDs
  })
  
  # Render the table
  output$team_performance_table <- renderTable({
    season_data()
  })
}


# Run the Shiny app
shinyApp(ui = ui, server = server)

```

```{r, warning=FALSE, message=FALSE}
#| label: map

# bubble map - Team Comparision

# Load necessary libraries
library(plotly)
library(dplyr)

# Define UI for the Shiny app
ui <- fluidPage(
  # Dropdown menu for selecting seasons
  selectInput(inputId = "selected_season", label = "Select Season:",
              choices = unique(filtered_data_5years$season),
              selected = NULL),
  
  # Plot output
  plotlyOutput(outputId = "choropleth_map")
)

# Define server logic
server <- function(input, output) {
  
  # Filter data for the selected season
  filtered_season_data <- reactive({
    filtered_data_5years %>%
      filter(season == input$selected_season) %>%
      group_by(team1) %>%
      summarise(total_runs = sum(as.numeric(runs_off_bat)), .groups = 'drop')
  })
  
  # Create choropleth map using plotly
  output$choropleth_map <- renderPlotly({
    # Access filtered data
    data <- filtered_season_data()
    
    # Load world map data
    world_map <- map_data("world")
    
    # Merge data with world map
    merged_data <- merge(world_map, data, by.x = "region", by.y = "team1", all.x = TRUE)
    
    # Create choropleth map
    plot_ly(merged_data, z = ~total_runs, locations = ~region, locationmode = "country names",
            type = "choropleth", colors = "Blues", marker = list(line = list(color = "rgb(255,255,255)", width = 2))) %>%
      layout(title = paste("Total Runs Scored by Countries in", input$selected_season),
             geo = list(scope = "world", projection = list(type = "natural earth")))
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)


```

```{r, warning=FALSE, message=FALSE}
#| label: donut


# half-eye-plot (donut) - team comparision

# Define UI for the Shiny app
ui <- fluidPage(
  # Dropdown menu for selecting seasons
  selectInput(inputId = "selected_season", label = "Select Season:",
              choices = unique(filtered_data_5years$season),
              selected = NULL),
  
  # Plot output
  plotlyOutput(outputId = "team_comparison_plot")
)

# Define server logic
server <- function(input, output) {
  
  # Filter data for the selected season
  filtered_season_data <- reactive({
    filtered_data_5years %>%
      filter(season == input$selected_season) %>%
      group_by(team1) %>%
      summarise(total_runs = sum(as.numeric(runs_off_bat)), .groups = 'drop')
  })
  
  # Create pie chart or half eye plot
  output$team_comparison_plot <- renderPlotly({
    # Access filtered data
    data <- filtered_season_data()
    
    # Create pie chart
    # pie_chart <- plot_ly(data, labels = ~team1, values = ~total_runs, type = "pie",
     #                    marker = list(colors = rainbow(nrow(data)))) %>%
     # layout(title = paste("Total Runs Scored by Countries in", input$selected_season),
     #        showlegend = FALSE)
    
    # Alternatively, create half eye plot
    half_eye_plot <- plot_ly(data, labels = ~team1, values = ~total_runs, type = "pie",
                             marker = list(colors = rainbow(nrow(data))),
                             hole = 0.4) %>%
      layout(title = paste("Total Runs Scored by Countries in", input$selected_season),
             showlegend = FALSE)
    
    # Return the plot based on selection
    # pie_chart
    half_eye_plot
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)

```

#### Batsman Partnership

```{r, warning=FALSE, message=FALSE}
#| label: partnership


# stacked-bar-plot - Batsman Partnerships

# Define UI for the Shiny app
ui <- fluidPage(
  
  # Dropdown menu for selecting the season
  selectInput(inputId = "selected_season", label = "Select Season:",
              choices = unique(filtered_data_5years$season), selected = NULL),
  
  # Plot output
  plotOutput(outputId = "partnership_plot")
)

# Define server logic
server <- function(input, output) {
  
  # Reactive function to filter data based on selected season
  partnership_data <- reactive({
    selected_data <- filtered_data_5years %>%
      filter(season == input$selected_season) %>%
      group_by(striker, non_striker) %>%
      summarise(partnership_runs = sum(as.numeric(runs_off_bat)), .groups = 'drop') %>%
      arrange(desc(partnership_runs)) %>%
      top_n(10)
    return(selected_data)
  })
  
  # Render the plot
  output$partnership_plot <- renderPlot({
    
    # Filter data based on selected season
    data <- partnership_data()
    
    # Create stacked bar plot for top batting partnerships
    ggplot(data, aes(x = reorder(paste(striker, non_striker, sep = " & "), -partnership_runs), y = partnership_runs, fill = striker)) +
      geom_bar(stat = "identity") +
      coord_flip() +
      labs(title = paste("Top 10 Batting Partnerships in", input$selected_season),
           x = "Batsman Pair",
           y = "Partnership Runs",
           fill = "Batsman") +
      theme_minimal() +
      theme(legend.position = "none")
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)


```






```{r}
library(jsonlite)
library(httr)

# API endpoint URL
apiUrl = "http://127.0.0.1:8100/analyzingtrends/getentirelivedata"

# Make GET request to the API
response = GET(apiUrl) 



# Reference [2]
# Check if the request was successful
if (http_status(response)$category == "Success") {
  
  # Reference [3]
  # Parse JSON content
  jsonContent = content(response, "text", encoding = "UTF-8")
  
  # Convert JSON to list
  dataList = fromJSON(jsonContent, simplifyVector = FALSE)
   
  # Flatten the nested lists
  flatten_list <- lapply(dataList, unlist)
  
  # Convert to dataframe
  liveData <- as.data.frame(do.call(rbind, flatten_list))
  
} else {
  # Print error message if request failed
  print("Failed to retrieve data from the API.")
}


liveData <- liveData %>%
  mutate(over = floor(as.double(ball))) |>
  group_by(battingTeam) |>
  mutate(runs = cumsum(as.integer(runsOffBat) + as.integer(extras)))
  
ggplot(liveData, aes(x = as.double(ball), y = runs, color = battingTeam)) +
  geom_line() +
  labs(x = "Overs", 
       y = "Runs", 
       title = "Scoring Rate Evolution",
       color = "Innings") +
  theme_minimal() 

```

```{r}


library(shiny)

apiUrl = "http://127.0.0.1:8100/analyzingtrends/getentirelivedata"
# Define UI
ui <- fluidPage(
  titlePanel("Live Data Plot"),
  
  # Output for the plot
  plotOutput("livePlot")
)

# Define server logic
server <- function(input, output, session) {
  
  # Reactive timer to trigger data updates every 5 seconds
  autoInvalidate <- reactiveTimer(1000)
  
  # Function to generate random data
  generateData <- function() {
      
      
      # Make GET request to the API
      response = GET(apiUrl) 
      
    
      # Check if the request was successful
      if (http_status(response)$category == "Success") {
    
        # Parse JSON content
        jsonContent = content(response, "text", encoding = "UTF-8")
        
        # Convert JSON to list
        dataList = fromJSON(jsonContent, simplifyVector = FALSE)
         
        # Flatten the nested lists
        flatten_list <- lapply(dataList, unlist)
        
        # Convert to dataframe
        liveData <- as.data.frame(do.call(rbind, flatten_list))
        return(liveData)
        
      } else {
      # Print error message if request failed
        print("Failed to retrieve data from the API.")
        return(NULL)
      }
  }
  
  # Reactive expression to update data at fixed intervals
  liveData <- reactive({
    autoInvalidate()
    generateData()
  })
  
  # Render the plot
  output$livePlot <- renderPlot({
    data <- liveData()
    liveData <- data %>%
      mutate(over = floor(as.double(ball))) |>
      group_by(battingTeam) |>
      mutate(runs = cumsum(as.integer(runsOffBat) + as.integer(extras)))
    
    ggplot(liveData, aes(x = as.double(ball), y = runs, color = battingTeam)) +
      geom_line() +
      xlim(0, 50) +
      ylim(0, 500) +
      labs(
        x = "Overs",
        y = "Runs",
        title = "Scoring Rate Evolution",
        color = "Innings"
      ) +
      theme_minimal() 
  })
}

# Run the application
shinyApp(ui = ui, server = server)



```
```{r}
library(googlesheets4)

# x = read.csv("https://drive.google.com/file/d/10z2Yr202-lckVqJCnsm3fet7yWq4RaWR/view?usp=sharing")

y = read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSd_HEZE5_vyvgzAcOIXqaCvgefTD-B8suE03j46W_pryfgcHBNAne_mVSKNHTIAbB03BkjxbvXFHlr/pub?gid=0&single=true&output=csv")

url = toString(y[1, "local"])

print(url)
```

