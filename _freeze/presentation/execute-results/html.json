{
  "hash": "883b2e5bbbf6cddc4274b3460afbb634",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Cricket Metrics\"\nsubtitle: \"INFO 526 - Spring 2024 - Project Final\"\nauthor: \"Anjani Sowmya, Alexander Berliner, Navya Reddy, Nandhani Anne, Srinivasan Poonkundran, Tejas Bhawari, Mohit Rakesh Taparia\"\ntitle-slide-attributes:\n  data-background-image: images/Background.jpg\n  data-background-size: stretch\n  data-background-opacity: \"0.5\"\n  data-slide-number: none\nformat:\n  revealjs:\n    theme:  [Sky,data/customtheming.scss]\n    transition: concave\n    background-transition: fade\n    logo: images/logo.jpg\n    footer: \"[üèè Plot Wizards](https://github.com/INFO-526-S24/project-final-PlotWizards/)\"\n    scrollable: true\neditor: visual\nexecute:\n  warning: false\n  echo: false\n---\n\n\n\n\n\n\n\n\n## **Introduction**\n\n-   Our project's goal is to create a dynamic dashboard that simulates a live cricket match experience utilizing historical data.\n-   The dashboard uses mocked live data updates to present vital insights into several areas of cricket matches and team dynamics.\n-   The project uses automatic data refreshes and API-driven analytics to manage live dataset problems, improve comprehension of cricket trends, and showcase cost-effective real-time sports analytics.\n\n## **Understanding the Data set**\n\n-   Extracted data from the data-set \"**ODI Men's Cricket Match Data (2002-2023)\"** sourced from Kaggle.\n\n-   From the original data-set we extracted two subsets:-\n\n    -   Past Data : Contains data for 5 years from 2018-2022.\n\n    -   Live Data: Contains data for the year 2023 till date.\n\n-   The data-set includes match details, innings data, player performance, match outcome, and umpire details.\n\n## **Question 1:**\n\nWhat is the performance of top 10 Batsmen?\n\nA. Scoring evolution over the match and top 10 batsman for each match?\n\nB. Top 10 batting percentage for each year?\n\n## **Question 2:**\n\nHow do the running scores differ by countries over the years?\n\nA. The Total runs scored by each country?\n\nB. The runs scores by different countries over the years?\n\n## **Question 1 - Part A** {.smaller transition=\"slide-in convex-out\"}\n\n::: panel-tabset\n#### Plot A\n\n![](images/Plot_1.jpeg){fig-align=\"center\" width=\"1078\"}\n\n#### Insights {.smaller auto-animate=\"true\"}\n\n-   The \"Scoring Rate Evolution\" graph shows the number of runs provided to the opponent per over throughout two different innings of a cricket match.\n-   The red line shows the scoring rate in the first innings, while the blue line indicates the scoring rate in the second innings.\n-   The graphic indicates that both innings have variable scoring rates, with many peaks indicating overs with very high scoring.\n:::\n\n## **Question 1**\n\n::: panel-tabset\n#### Plot B\n\n![](images/Plot_2.jpeg){fig-align=\"center\" width=\"1078\"}\n\n#### Insights {.smaller auto-animate=\"true\"}\n\n-   The bar chart shows ranks for batsmen based on the total runs they scored during the selected cricket season (2022/23).\n-   The batsmen are displayed along the x-axis with their corresponding runs on the y-axis.\n-   This could allow for inferences concerning whether specific genres of media are inherently built with introverted or extroverted characters.\n:::\n\n## **Question 1 - Part B**\n\n::: panel-tabset\n#### Plot A\n\n![](images/Plot_3.jpeg){fig-align=\"center\" width=\"1078\"}\n\n#### Insights {.smaller auto-animate=\"true\"}\n\n-   The map illustrate the total runs scored by countries in the 2022/23 cricket season, using a color gradient to represent the data.\n-   The color scale ranges from light yellow (1000 runs) to dark blue (2000 runs), indicating the volume of runs scored.\n:::\n\n## **Question 2 - Part A**\n\n::: panel-tabset\n#### Plot A\n\n![](images/Plot_4.jpeg){width=\"1078\"}\n\n#### Insights {.smaller auto-animate=\"true\"}\n\n-   The Donut chart represents the percentage distribution of total cricket runs scored by different teams in the 2022/23 season.\n-   This visualization highlights the dominance of the leading team in run-scoring compared to the others in different seasons.\n:::\n\n## **Question 2 - Part B**\n\n::: panel-tabset\n#### Plot B\n\n![](images/Plot_5.jpeg){width=\"1078\"}\n\n#### Insights\n\n-   This bar chart represents the top 10 batting partnerships in terms of runs scored during the 2022/23 cricket season.\n-   Each pair of batsmen is represented by a different color and labeled under the chart.\n-   The chart effectively shows the variability and success of different batting combinations in contributing significant runs to their teams' totals.\n:::\n\n## **R Shiny Application:**\n\n[Shiny App for Cricket Analysis](https://yq6ayj-srinivasan0poonkundran.shinyapps.io/CricketMetrics-PlotWizards/)\n\n## **Limitations**\n\n1.  Since we are using shiny application and publishing it in a free portal, it takes a little time for the plots to load.\n\n2.  For the live match, calling the API continuously is causing flickering\n\n## **Conclusion**\n\n-   Our project demonstrated the successful integration of data visualization tools and APIs to simulate a live cricket match experience.\\\n-   Through rigorous data analysis, we provided deep insights into scoring rates, batting and bowling performances, and the strategic impacts of partnerships.\\\n-   By mimicking live data updates, our project delivered a cost-effective yet realistic approach to sports analytics.\n\n## **Thank you** {transition=\"convex-in zoom-out\"}\n\n![](images/TT.gif){fig-align=\"center\" width=\"900\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}